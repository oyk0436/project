<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=bdadc1cc228e9d3e9687e2342d8d5475"></script>
<script>
var mapWalker;
var overlayOn = false, // 지도 위에 로드뷰 오버레이가 추가된 상태를 가지고 있을 변수
container = document.getElementById('container'), // 지도와 로드뷰를 감싸고 있는 div 입니다
mapWrapper = document.getElementById('mapWrapper'), // 지도를 감싸고 있는 div 입니다
mapContainer = document.getElementById('map'), // 지도를 표시할 div 입니다 
rvContainer = document.getElementById('roadview'); //로드뷰를 표시할 div 입니
//지도위에 현재 로드뷰의 위치와, 각도를 표시하기 위한 map walker 아이콘 생성 클래스
 var startX, startY, startOverlayPoint;
  function MapWalker(position){
  //커스텀 오버레이에 사용할 map walker 엘리먼트
  var content = document.createElement('div');
  var figure = document.createElement('div');
  var angleBack = document.createElement('div');

  //map walker를 구성하는 각 노드들의 class명을 지정 - style셋팅을 위해 필요
  content.className = 'MapWalker';
  figure.className = 'figure';
  angleBack.className = 'angleBack';

  content.appendChild(angleBack);
  content.appendChild(figure);

  //커스텀 오버레이 객체를 사용하여, map walker 아이콘을 생성
  var walker = new kakao.maps.CustomOverlay({
      position: position,
      content: content,
      yAnchor: 1
  });

  this.walker = walker;
  this.content = content;
      // 커스텀 오버레이에 mousedown, mouseup 이벤트를 등록합니다
      addEventHandle(this.content, 'mousedown', onMouseDown);
      addEventHandle(this.content, 'mouseup', onMouseUp);

      // 커스텀 오버레이에 touchstart, touchend 이벤트를 등록합니다
      addEventHandle(this.content, 'touchstart', onMouseDown);
      addEventHandle(this.content, 'touchend', onMouseUp);
      
  }

  function onMouseDown(e) { 	
      // 커스텀 오버레이를 드래그 할 때, 내부 텍스트가 영역 선택되는 현상을 막아줍니다.
      if (e.preventDefault) {
          e.preventDefault();
      } else {
          e.returnValue = false;
      }
      
      var proj = map.getProjection(), 
          overlayPos = mapWalker.getPosition(); // 커스텀 오버레이의 현재 위치를 가져옵니다
      
      // 커스텀오버레이에서 마우스 관련 이벤트가 발생해도 지도가 움직이지 않도록 합니다
      kakao.maps.event.preventMap();
      if(e.type=='mousedown')
      {   startX = e.clientX; 
          startY = e.clientY;
      }
      else if (e.type=='touchstart') {
          startX = e.touches[0].clientX; 
          startY = e.touches[0].clientY;
      }

      // mousedown됐을 때의 커스텀 오버레이의 좌표를
      // 지도 컨테이너내 픽셀 좌표로 변환합니다 
      startOverlayPoint = proj.containerPointFromCoords(overlayPos);

      // document에 mousemove 이벤트를 등록합니다 
          addEventHandle(document, 'mousemove', onMouseMove);
          addEventHandle(document, 'touchmove', onMouseMove);
  }

  function onMouseMove(e) {
      // 커스텀 오버레이를 드래그 할 때, 내부 텍스트가 영역 선택되는 현상을 막아줍니다.
      if (e.preventDefault) {
          e.preventDefault();
      } else {
          e.returnValue = false;
      }

      if(e.type=='mousemove')
      {
          var proj = map.getProjection(),// 지도 객체로 부터 화면픽셀좌표, 지도좌표간 변환을 위한 MapProjection 객체를 얻어옵니다 
          deltaX = startX - e.clientX, // mousedown한 픽셀좌표에서 mousemove한 좌표를 빼서 실제로 마우스가 이동된 픽셀좌표를 구합니다 
          deltaY = startY - e.clientY,
          // mousedown됐을 때의 커스텀 오버레이의 좌표에 실제로 마우스가 이동된 픽셀좌표를 반영합니다 
          newPoint = new kakao.maps.Point(startOverlayPoint.x - deltaX, startOverlayPoint.y - deltaY), 
          // 계산된 픽셀 좌표를 지도 컨테이너에 해당하는 지도 좌표로 변경합니다 
          newPos = proj.coordsFromContainerPoint(newPoint);
      }
      else if (e.type=='touchmove') {
          var proj = map.getProjection(),// 지도 객체로 부터 화면픽셀좌표, 지도좌표간 변환을 위한 MapProjection 객체를 얻어옵니다 
          deltaX = startX - e.touches[0].clientX, // mousedown한 픽셀좌표에서 mousemove한 좌표를 빼서 실제로 마우스가 이동된 픽셀좌표를 구합니다 
          deltaY = startY - e.touches[0].clientY,
          // mousedown됐을 때의 커스텀 오버레이의 좌표에 실제로 마우스가 이동된 픽셀좌표를 반영합니다 
          newPoint = new kakao.maps.Point(startOverlayPoint.x - deltaX, startOverlayPoint.y - deltaY), 
          // 계산된 픽셀 좌표를 지도 컨테이너에 해당하는 지도 좌표로 변경합니다 
          newPos = proj.coordsFromContainerPoint(newPoint);
      }
      // 커스텀 오버레이의 좌표를 설정합니다 
      mapWalker.setPosition(newPos);
  	}

  	
  // mouseup 했을 때 호출되는 핸들러 입니다
  function onMouseUp(e) {
      // 등록된 mousemove 이벤트 핸들러를 제거합니다
      removeEventHandle(document, 'mousemove', onMouseMove);
      removeEventHandle(document, 'touchmove', onMouseMove);
      //이동한 마커 위치의 panoId를 가져올 수 있도록 toggleRoadview를 호출합니다.
      var position=mapWalker.getPosition();
      toggleRoadview(position);
  }
  
	//로드뷰 생성
  	function toggleRoadview(position){
  		roadviewClient.getNearestPanoId(position, 50, function(panoId) {
	      
  			if (panoId === null) {
  	            toggleMapWrapper(true, position);
  	        } else {
  	         toggleMapWrapper(false, position);

	         roadview.setPanoId(panoId, position);
	        }
	        document.getElementById("rvWrapper").style.display='';
  			var control = document.getElementById('roadviewControl');
  	      	control.style.display = 'none';
  			var btn=document.getElementById('mapbtn');
  	        btn.style.display = 'none';
	        
	    });
	}
  	
  	function toggleMapWrapper(active, position) {
  	    if (active) {

  	        // 지도를 감싸고 있는 div의 너비가 100%가 되도록 class를 변경합니다 
  	        container.className = '';

  	        // 지도의 크기가 변경되었기 때문에 relayout 함수를 호출합니다
  	        map.relayout();

  	        // 지도의 너비가 변경될 때 지도중심을 입력받은 위치(position)로 설정합니다
  	        map.setCenter(position);
  	    } else {

  	        // 지도만 보여지고 있는 상태이면 지도의 너비가 50%가 되도록 class를 변경하여
  	        // 로드뷰가 함께 표시되게 합니다
  	        if (container.className.indexOf('view_roadview') === -1) {
  	            container.className = 'view_roadview';

  	            // 지도의 크기가 변경되었기 때문에 relayout 함수를 호출합니다
  	            map.relayout();

  	            // 지도의 너비가 변경될 때 지도중심을 입력받은 위치(position)로 설정합니다
  	            map.setCenter(position);
  	        }
  	    }
  	}
  	
  	function toggleOverlay(active) {
  		
  	    if (active) {
  	        // 지도 위에 로드뷰 도로 오버레이를 추가합니다
  	        map.addOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);
	  	      
	  	  	mapWalker = null;
	  	  	// map walker를 생성한다. 생성시 지도의 중심좌표를 넘긴다.
	  	    mapWalker = new MapWalker(map.getCenter());
	  	    mapWalker.setMap(map); // map walker를 지도에 설정한다.
	  	    // 로드뷰가 초기화 된 후, 추가 이벤트를 등록한다.
	  	    // 로드뷰를 상,하,좌,우,줌인,줌아웃을 할 경우 발생한다.
	  	    // 로드뷰를 조작할때 발생하는 값을 받아 map walker의 상태를 변경해 준다.
	  	    kakao.maps.event.addListener(roadview, 'viewpoint_changed', function(){
	
	  	        // 이벤트가 발생할 때마다 로드뷰의 viewpoint값을 읽어, map walker에 반영
	  	        var viewpoint = roadview.getViewpoint();
	  	        mapWalker.setAngle(viewpoint.pan);
	
	  	    });
	
	  	    // 로드뷰내의 화살표나 점프를 하였을 경우 발생한다.
	  	    // position값이 바뀔 때마다 map walker의 상태를 변경해 준다.
	  	    kakao.maps.event.addListener(roadview, 'position_changed', function(){
	
	        // 이벤트가 발생할 때마다 로드뷰의 position값을 읽어, map walker에 반영 
	        var position = roadview.getPosition();
	        mapWalker.setPosition(position);
	   		map.setCenter(position);
  	      });
  	    } else {
  	    	document.getElementById("rvWrapper").style.display="none";
  	        // 지도 위의 로드뷰 도로 오버레이를 제거합니다
  	        map.removeOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);

  	        // 지도 위의 마커를 제거합니다
  	        mapWalker.setMap(null);
  	    }
  	}
  	
  	function setRoadviewRoad() {
  	    var control = document.getElementById('roadviewControl');
  	  	
  	    // 버튼이 눌린 상태가 아니면
  	    if (control.className.indexOf('active') === -1) {
  	        control.className = 'active';
  	        // 로드뷰 도로 오버레이가 보이게 합니다
  	        toggleOverlay(true);
  	    } else {
  	        control.className = '';
  	      	
  	        // 로드뷰 도로 오버레이를 제거합니다
  	        toggleOverlay(false);
  	    }
  	}
  	
  	function closeRoadview() {
  	    var position = mapWalker.getPosition();
  	  	document.getElementById('mapbtn').style.display = 'block';
  	  	document.getElementById('roadviewControl').style.display = 'block';
  	    toggleMapWrapper(true, position);
  	}
  
  // target node에 이벤트 핸들러를 등록하는 함수힙니다  
  function addEventHandle(target, type, callback) {
      if (target.addEventListener) {
          target.addEventListener(type, callback);
      } else {
          target.attachEvent('on' + type, callback);
      }
  }

  // target node에 등록된 이벤트 핸들러를 제거하는 함수힙니다 
  function removeEventHandle(target, type, callback) {
      if (target.removeEventListener) {
          target.removeEventListener(type, callback);
      } else {
          target.detachEvent('on' + type, callback);
      }
  }

//로드뷰의 pan(좌우 각도)값에 따라 map walker의 백그라운드 이미지를 변경 시키는 함수
//background로 사용할 sprite 이미지에 따라 계산 식은 달라 질 수 있음
MapWalker.prototype.setAngle = function(angle){

    var threshold = 22.5; //이미지가 변화되어야 되는(각도가 변해야되는) 임계 값
    for(var i=0; i<16; i++){ //각도에 따라 변화되는 앵글 이미지의 수가 16개
        if(angle > (threshold * i) && angle < (threshold * (i + 1))){
            //각도(pan)에 따라 아이콘의 class명을 변경
            var className = 'm' + i;
            this.content.className = this.content.className.split(' ')[0];
            this.content.className += (' ' + className);
            break;
        }
    }
};

MapWalker.prototype.getPosition = function() {
    return this.walker.getPosition();
}
//map walker의 위치를 변경시키는 함수
MapWalker.prototype.setPosition = function(position){
    this.walker.setPosition(position);
};

//map walker를 지도위에 올리는 함수
MapWalker.prototype.setMap = function(map){
    this.walker.setMap(map);
};

/*
 * 아래부터 실제 지도와 로드뷰 map walker를 생성 및 제어하는 로직
 */
var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
    mapCenter = new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 가운데 좌표
    mapOption = {
        center: mapCenter, // 지도의 중심좌표
        level: 3 // 지도의 확대 레벨
    };

// 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다
var map = new kakao.maps.Map(mapContainer, mapOption);

var roadviewContainer = document.getElementById('roadview'); // 로드뷰를 표시할 div
var roadview = new kakao.maps.Roadview(roadviewContainer); // 로드뷰 객체
var roadviewClient = new kakao.maps.RoadviewClient(); // 좌표로부터 로드뷰 파노ID를 가져올 로드뷰 helper객체

var currentTypeId;

//버튼이 클릭되면 호출되는 함수입니다
function setOverlayMapTypeId(maptype) {
 var changeMaptype;
 
 // maptype에 따라 지도에 추가할 지도타입을 결정합니다
 if (maptype === 'roadmap') {            
     
     // 교통정보 지도타입
     changeMaptype = kakao.maps.MapTypeId.ROADMAP;     
     
 } else if (maptype === 'skyview') {        
     
     // 로드뷰 도로정보 지도타입
     changeMaptype = kakao.maps.MapTypeId.SKYVIEW;    

 }else if(maptype==='hybrid'){
 	changeMaptype = kakao.maps.MapTypeId.HYBRID;   

 }
 
 // 이미 등록된 지도 타입이 있으면 제거합니다
 if (currentTypeId) {
     map.removeOverlayMapTypeId(currentTypeId);    
 }
 
 // maptype에 해당하는 지도타입을 지도에 추가합니다
map.setMapTypeId(changeMaptype);
 
 // 지도에 추가된 타입정보를 갱신합니다
 currentTypeId = changeMaptype;        
}



</script>